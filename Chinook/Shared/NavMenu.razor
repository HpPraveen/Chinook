@using Chinook.Services.Interfaces
@using Chinook.Domain.Models
@using System.Security.Claims
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Chinook</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <MudList Clickable="true">

                <MudLink Href="#" Color="Color.Secondary">
                    <MudListItem Icon="@Icons.Material.Outlined.Home" IconColor="Color.Secondary">
                        Home
                    </MudListItem>
                </MudLink>

                <MudLink Href="playlist/playlistnumber" Color="Color.Success">
                    <MudListItem Icon="@Icons.Material.Filled.Star" IconColor="Color.Success">
                        Favorites (@FavoritePlaylist?.Tracks.Count)
                    </MudListItem>
                </MudLink>

                <MudListItem Icon="@Icons.Material.Outlined.VideoLibrary" IconColor="Color.Info"
                             Text="My Play Lists" InitiallyExpanded="false">
                    <NestedList>
                        @if (UserPlayLists?.Count > 0)
                        {
                            @foreach (var userPlayList in UserPlayLists)
                            {
                                <MudLink Href="#">
                                    <MudListItem Icon="@Icons.Material.Outlined.MusicNote" IconColor="Color.Info">
                                        @userPlayList.Playlist.Name (@userPlayList.Playlist.Tracks.Count)
                                    </MudListItem>
                                </MudLink>
                            }
                        }
                    </NestedList>
                </MudListItem>

            </MudList>

        </div>
    </nav>
</div>

@code {

    [Inject]
    ITrackService TrackService { get; set; }

    [Inject]
    IPlayListService PlayListService { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private string? currentUserId;
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private List<UserPlaylist> UserPlayLists;
    private Playlist? FavoritePlaylist;

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        currentUserId = await GetUserId();
        GetPlayLists();

        TrackService.PlayListUpdated += HandlePlaylistUpdated;
    }

    private void HandlePlaylistUpdated()
    {
        GetPlayLists();
        StateHasChanged();
    }

    private void GetPlayLists()
    {
        if (currentUserId != null)
        {
            UserPlayLists = PlayListService.GetUserPlaylist(currentUserId);
            FavoritePlaylist = PlayListService.GetFavoritePlaylist(currentUserId);
        }        
    }

    private async Task<string?> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}