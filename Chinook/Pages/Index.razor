@page "/"
@using Chinook.Domain.Models
@using Chinook.Domain
@using Chinook.Services.Interfaces
@using Microsoft.EntityFrameworkCore
@attribute [Authorize]

<PageTitle>Index</PageTitle>

<h1>Artists</h1>

@if (Artists == null)
{
    <Loading />
}
else
{
    <MudTextField @bind-Value="@searchTerm" Label="Search Artist" Variant="Variant.Outlined"
                  Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"
                  AdornmentColor="Color.Tertiary" />


    @if (Artists.Count > 0)
    {
        <br>
        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Number of albums</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var artist in Artists)
                {
                    <tr>
                        <td>
                            <a href="Artist/@artist.ArtistId">@artist.Name</a>
                        </td>
                        <td>@artist.Albums.Count()</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    [Inject]
    IDbContextFactory<ChinookContext> DbFactory { get; set; }

    [Inject]
    IArtistService ArtistService { get; set; }

    private string searchTerm;
    private List<Artist> AllArtists;

    private List<Artist> Artists => string.IsNullOrWhiteSpace(searchTerm)
        ? AllArtists : GetSearchedArtists();

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        AllArtists = ArtistService.GetAllArtists().Result;
    }

    public List<Artist> GetSearchedArtists()
    {
        return AllArtists.Where(a => a.Name != null
                                     && a.Name.ToLower().Contains(searchTerm.ToLower())).ToList();
    }

    public async Task<List<Album>> GetAlbumsForArtist(int artistId)
    {
        var dbContext = await DbFactory.CreateDbContextAsync();
        return dbContext.Albums.Where(a => a.ArtistId == artistId).ToList();
    }
}