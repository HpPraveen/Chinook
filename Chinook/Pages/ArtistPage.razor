@page "/artist/{ArtistId:long}"

@using Chinook.Domain
@using Chinook.Domain.ClientModels
@using Chinook.Domain.Models
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using Chinook.Services.Interfaces

@attribute [Authorize]

@if (showFavAlert)
{

    <MudAlert Severity="Severity.Success" Variant="Variant.Filled" ShowCloseIcon="true"
              CloseIconClicked="(() => CloseInfoMessage(true))">@favInfoMessage</MudAlert>
}
else if (showUnFavAlert)
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Filled" ShowCloseIcon="true"
              CloseIconClicked="(() => CloseInfoMessage(true))">@unFavInfoMessage</MudAlert>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Album title</th>
                <th>Track name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Un-mark as favorite" @onclick="@(() => UnFavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }
    [Inject] IArtistService ArtistService { get; set; }
    [Inject] ITrackService TrackService { get; set; }
    [Inject] IPlayListService PlayListService { get; set; }
    private Modal PlaylistDialog { get; set; }
    private Artist Artist;
    private List<UserPlaylist> UserPlayLists;
    private List<PlaylistTrack> Tracks;
    private DbContext DbContext;
    private PlaylistTrack SelectedTrack;
    private string favInfoMessage;
    private string unFavInfoMessage;
    private bool showFavAlert;
    private bool showUnFavAlert;
    private string? currentUserId;
    private string? newPlayListName;
    private string? existingPlayListName;

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        currentUserId = await GetUserId();
        Artist = await ArtistService.GetArtistById(ArtistId);
        if (currentUserId != null) Tracks = TrackService.GetTracksForArtist(ArtistId, currentUserId);
    }

    private async Task<string?> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private void FavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        if (track != null)
        {
            track.IsFavorite = true;
            var isTrackAdded = currentUserId != null && TrackService.AddTrackToPlayList(trackId, "My favorite tracks", currentUserId);
            if (isTrackAdded)
            {
                favInfoMessage = $"Track ' {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} ' added to playlist 'My Favorites'.";
                showFavAlert = true;
                showUnFavAlert = false;
            }
        }
    }

    private void UnFavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        if (track != null)
        {
            track.IsFavorite = false;
            var isTrackRemoved = currentUserId != null && TrackService.RemoveTrackFromPlayList(trackId, "My favorite tracks", currentUserId);
            if (isTrackRemoved)
            {
                unFavInfoMessage = $"Track ' {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} ' removed from playlist 'My Favorites'.";
                showUnFavAlert = true;
                showFavAlert = false;
            }
        }
    }

    private void OpenPlaylistDialog(long trackId)
    {
        if (currentUserId != null) UserPlayLists = PlayListService.GetUserPlaylist(currentUserId);
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId) ?? throw new InvalidOperationException();
        PlaylistDialog.Open();
    }

    private void AddTrackToExistingPlayList()
    {
        var isTrackAdded = existingPlayListName != null && currentUserId != null && TrackService.AddTrackToPlayList(SelectedTrack.TrackId, existingPlayListName, currentUserId);
        if (isTrackAdded)
        {
            favInfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added  existing playlist {{playlist name}}.";
            PlaylistDialog.Close();
        }
    }

    private void AddTrackToNewPlayList()
    {
        var isTrackAdded = newPlayListName != null && currentUserId != null && TrackService.AddTrackToPlayList(SelectedTrack.TrackId, newPlayListName, currentUserId);
        if (isTrackAdded)
        {
            favInfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to new playlist {{playlist name}}.";
            PlaylistDialog.Close();
        }
    }

    private void CloseInfoMessage(bool value)
    {
        switch (value)
        {
            case true:
                showFavAlert = false;
                showUnFavAlert = false;
                break;
        }
    }
}

<Modal @ref="PlaylistDialog">
    <Title>
        Add to playlist
    </Title>
    <Body>

        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
            <br>
        }

        @if (UserPlayLists?.Count > 0)
        {
            <MudGrid>
                <MudItem xs="12" sm="6" md="4">
                    <MudSelect @bind-Value="existingPlayListName" Margin="Margin.Dense" T="string" Label="Playlists" Variant="Variant.Outlined">
                        @foreach (var userPlayList in UserPlayLists)
                        {
                            <MudSelectItem Value="@userPlayList.Playlist.Name" />
                        }
                    </MudSelect>
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add"
                               Color="Color.Info" Size="Size.Small"
                               OnClick="AddTrackToExistingPlayList">Add To Existing</MudButton>

                </MudItem>
            </MudGrid>
        }

        <MudGrid>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField @bind-Value="newPlayListName" Label="Create new playlist" Variant="Variant.Outlined" />
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Create"
                           Color="Color.Success" Size="Size.Small"
                           OnClick="AddTrackToNewPlayList">Add To New</MudButton>
            </MudItem>
        </MudGrid>

    </Body>
</Modal>
